##### 24 Jun 2015 #####
- TODO: Make BC and ODE into classes with __call__ methods
  - Add methods to compile, add 'state'/ode? add BC by index?
  - Repurpose DynamicSystem class for use as ODE, keep track of BC index by state?
  - Add function to DynamicSystem/ODE to constrain state by name
    - maybe use existing "constraint" function
  - 

##### 10 Jun 2015 #####
- Added joblib library to utils
- Added initial guess caching to numerical root solving -- not sure if very effective
  - TODO: Added some kind of reset functionality?

##### 10 Jun 2015 #####
- Loads functions automatically from input file
- TODO: Unscale variables being passed into function
- TODO: Make a new diff() function

##### 09 Jun 2015 #####
- Custom function functionality added
  - automatically defines functions inside compute_control in local scope
  - replaces function derivatives with complex step
  - uses scipy fsolve to solve for control
    - TODO: Cache initial guess/results?

##### 03 Jun 2015 #####
- Added scaling
- Added sympify2
  - carets work as expected
  - 're' works now
- Planar hypersonic problem now functional
- Fixed bug in generation of control ontrol_options
- 3DOF problem now functional

##### 02 Jun 2015 #####
- Added some code for simultaneous control calculations
- Multiple controls *probably* works, yet to test
- Added lagrange multipliers as parameters
- Automated generation of boundary conditions structure
- Automatic generation of "aux_vars" in the BVP object
- Automated initial guess generation
  - tested with brachistochrone
  - TODO: load from file, function handle, static guess

##### 31 May 2015 #####
- Added process_systems method to NecessaryConditions
  - work in progress

- TODO: Allow automatic definition of separate independent variables
        for all the systems of a specific type

- Added DynamicSystemList and DynamicSystem classes
- Renamed *Set classes to *List for the sake of semantics
- Fixed possible circular import problem
- Functionality retained when user does not specify multiple systems
  - Multiple systems functionality has not been tested properly
  - TODO: Implement addition of constraints to multiple systems

- TODO: Use unit tests and some testing framework to do proper testing
  - Make testing a part of the workflow
  - Use py.test package?

- Added config.ini to gitignore
- TODO: Find way to refactor code to avoid repetition (e.g. function definitions)
- TODO**: Refactor code in NecessaryConditions to use list comprehension
- Added "Constant" class

##### 30 May 2015 - 5:00 pm Update #####
- Restructured folders again to make Beluga and BelugaConfig classes work properly
- there may still be bugs left over
- Bug: Creates config.ini in "current" folder


##### 29 May 2015 - 10:00 pm Update #####
- changed ContinuationStep to use generator method instead of explicit next()/complete() methods

- added ConstraintSet container class
    - method chaining allows

- renamed problem.constraint to problem.constraints
- add equivalence override to State class
- moved problem module into optim
- moved Problem class out of problem module
- first attempt at automating BC creation

- TODO: Create a "chainable list" class for general use?
    - Can be used for constraints, continuation set etc.

- made "Beluga" class
    - class method run() that takes a problem object, instantiates a Beluga object and calls solve()
    - run() is just there to make things easier for user.
    - moved run_optim into the Beluga.solve method
    - created run_continuation_set() method
        - clarify how initial guess is treated

- renamed bvpsol.Problem to bvpsol.BVP to avoid any naming clash

- moved compute_necessary_conditions into a get_bvp method in   NecessaryConditions which also creates a BVP object to return to Beluga

- modified ContinuationStep class to allow chaining
    - created num_cases() into a method that either sets or gets num_cases

- create ContinuationSet class subclassing list
    - add_step() function allows adding steps using chaining

- removed FunctionTemplate.py and added compile() to NecessaryConditions
- change inputFile.py into a script
    - added continuation steps list (need to rethink representation of steps)
    - added bvp solver as input option
    - added initial guess option
    - added example to show three ways to implement chaining

- added automation to __init__ files

TODO:
* create BelugaConfig class to describe solver configuration
  such as output directory, restart options etc.
