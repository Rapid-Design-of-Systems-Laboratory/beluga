#!/usr/bin/env python
"""Beluga Optimal Control Solver.

Usage:
  beluga --config
  beluga (-v | --version)
  beluga (-h | --help)
  beluga SCENARIO
                  [-o | --output <file>]
                  ([--nolog] | [-l | --log <level>])
                  ([-q] | [-d | --display <level>])

Options:
  --config                  starts the configuration tool
  -h, --help                show this screen and exit
  -v, --version             show version

  Logging options
  -l, --log <level>         specify minimum logging level [default: ERROR]
  -l0,-l1,-l2,-l3,-l4       shortcuts for ALL, INFO, WARN, ERROR and CRITICAL
                            respectively
  -loff, --nolog            suppress logging, equivalent to --log=off

  -q                        quiet mode, equivalent to --display=off
  -d, --display <level>     specify minimum verbose output level [default: INFO]
  -d0,-d1,-d2,-d3,-d4       shortcuts for ALL, INFO, WARN, ERROR and CRITICAL
                            respectively

  -o, --output <file>       specify data file for solution
                            (overrides option specified in input file)

Arguments:
  SCENARIO                  name of python module orpath to python/json/yaml file
                            containing the problem scenario [REQUIRED]

  <file>                    path to the data file for solution
  <level>                   logging level [ALL, INFO, WARN, ERROR, CRITICAL, OFF]

Example:
  Run problem using python module name :
    beluga brachisto

  Run using path to input file:
    beluga /path/to/problem.py

  Specify logging and display levels (0 -> all messages including debug messages)
    beluga -d0 -l0 /path/to/brachisto.py

  Specify output data file
    beluga brachisto --output=brachisto_out.dill

  Run configuration tool
    beluga --config

Help:
  For help using this tool, please open an issue on the Github repository:
  https://github.rcac.purdue.edu/RDSL/beluga

"""
from docopt import docopt
import beluga.Beluga as Beluga
import os, sys, logging
import importlib # Only works with Python >= 3.4
import yaml

from beluga.optim.problem import *
from beluga.optim import Problem
from beluga.continuation import *

def load_yaml(filename):
    with open(filename,'r') as stream:
        # TODO: Add data validation for YAML
        scenario_data = yaml.load(stream)

        if not 'name' in scenario_data.keys():
            scenario_name, _ = os.path.splitext(os.path.basename(filename))
        else:
            scenario_name = scenario_data['name']

        problem = Problem(scenario_name)

        # Define independent variable
        problem.independent(scenario_data['independentVariable']['name'],
                            scenario_data['independentVariable']['unit'])

        # Define states
        for state in scenario_data['states']:
            problem.state(state['name'], state['equation'], state['unit'])

        # Define controls
        for control in scenario_data['controls']:
            problem.control(control['name'], control['unit'])

        # Define cost function
        # TODO: Allow multiple cost functions
        costFn = scenario_data['costFunction']
        problem.cost[costFn['costType']] = Expression(costFn['expression'],costFn['unit'])

        # Define scaling units
        for unit in scenario_data['units']:
            problem.scale.unit(unit['name'], unit['scaleExpr'])

        # Define constants
        for const in scenario_data['constants']:
            problem.constant(const['name'], const['value'], const['unit'])

        # Define constraints
        for constraint in scenario_data['constraints']:
            if isinstance(constraint, list):
                problem.constraints('default',0).add(Constraint(*constraint))
            else:
                problem.constraints('default',0).add(Constraint(
                                                    constraint['type'],
                                                    constraint['expr'],
                                                    constraint['unit'])
                                                )

        # Define initial guess
        guess = scenario_data['guess']
        problem.guess.setup(guess['type'],
                            start=guess['start'],
                            direction=guess['direction'],
                            costate_guess=guess['costate_guess'])

        # Define continuation steps
        for step_data in scenario_data['continuation']:
            step = ContinuationStep()

            step.num_cases(step_data['num_cases'])
            for action in step_data['actions']:
                if isinstance(action, list):
                    step.set(*action)
                else:
                    step.set(action['type'], action['variable'], action['target'])

            problem.steps.add_step(step)

        return problem

def load_scenario(scenario_name):
    """Loads a scenario from python module name or file name/path"""
    # TODO: Log error messages on failure

    # Check if a python filename was given
    if scenario_name.endswith('.py') and os.path.exists(scenario_name) and os.path.isfile(scenario_name):
        module_dir, module_file = os.path.split(scenario_name)
        module_name, module_ext = os.path.splitext(module_file)
        sys.path.append(module_dir)
    elif (scenario_name.endswith('.yml') or scenario_name.endswith('.json'))and os.path.exists(scenario_name) and os.path.isfile(scenario_name):
        # print('Loading from YAML scenario ..')
        return load_yaml(scenario_name)
    else:
        if scenario_name.isidentifier():
            module_name = scenario_name

        else:
            print('Invalid scenario filename or module name')
            return None
    try:
        scenario = importlib.import_module(module_name)
         # Check if module has a get_problem() function
        if hasattr(scenario,'get_problem') and callable(scenario.get_problem):
            # Module loaded successfully
            # print('Module loaded successfully. ðŸ˜‚')
            return scenario.get_problem()
        else:
            print('Unable to find get_problem() function in scenario module')
            return None

    except ImportError:
        print('Scenario module not found')
        return None

def main(options):
    if options['--config']:
        import beluga.BelugaConfig as BelugaConfig
        BelugaConfig(run_tool=True)
        return

    scenario = load_scenario(options['SCENARIO'].strip())
    if scenario is None:
        return

    levels = {  'ALL': logging.DEBUG,
                'DEBUG': logging.DEBUG,
                '0': logging.DEBUG,
                'INFO': logging.INFO,
                '1': logging.INFO,
                'WARNING': logging.WARN,
                'WARN': logging.WARN,
                '2': logging.WARN,
                'ERROR': logging.ERROR,
                '3': logging.ERROR,
                'CRITICAL': logging.CRITICAL,
                '4': logging.CRITICAL,
                'OFF': logging.CRITICAL + 1}
    # print(options)

    # Process logging options
    if options['--nolog']:
        # Suppress all logging
        options['--log'][0] = 'off'

    if options['--log'][0].upper() not in levels:
        print('Invalid value specified for logging level')
        return
    logging_lvl = levels[options['--log'][0].upper()]

    # Process console output options
    if options['-q']:
        # Suppress all console output
        options['--display'][0] = 'off'

    if options['--display'][0].upper() not in levels:
        print('Invalid value specified for display level')
        return
    display_lvl = levels[options['--display'][0].upper()]

    if len(options['--output']) > 0:
        output = os.path.abspath(options['--output'][0].strip())
        # Check if the file locaton is writeable
        if not os.access(os.path.dirname(output), os.W_OK):
            print('Unable to access output file location or invalid filename ðŸ˜­ ðŸ˜­')
            return
    else:
        output = None

    Beluga.run(scenario, logging_level=logging_lvl, display_level=display_lvl, output_file=output)
    # print(options)

options = docopt(__doc__,version=0.1)
main(options)
# Use command line arguments to get input file
# problem = get_problem()
# sol = Beluga.run(problem)
