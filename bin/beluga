#!/usr/bin/env python
"""Beluga Optimal Control Solver.

Usage:
  beluga --config
  beluga (-v | --version)
  beluga (-h | --help)
  beluga SCENARIO
                  [-o | --output <file>]
                  [-l | --log <level>]
                  ([-q] | [-d | --display <level>])

Options:
  --config                  starts the configuration tool
  -h, --help                show this screen and exit
  -v, --version             show version

  Logging options
  -q                        quiet mode (suppresses almost all console output)
  -l, --log <level>         specify minimum logging level [default: INFO]
  -l0,-l1,-l2,-l3,-l4       shortcuts for ALL, INFO, WARN, ERROR and CRITICAL
                            respectively
  -d, --display <level>     specify minimum verbose output level [default: INFO]
  -d0,-d1,-d2,-d3,-d4       shortcuts for ALL, INFO, WARN, ERROR and CRITICAL
                            respectively
  -o, --output <file>       specify data file for solution [default: data.dill]

Arguments:
  SCENARIO                  name of python module or path to python file
                            containing the problem scenario [REQUIRED]

  <file>                    path to the data file for solution
  <level>                   logging level [ALL, INFO, WARN, ERROR, CRITICAL]

Example:
  beluga brachistochrone
  beluga brachistochrone --output=brachisto_out.dill

  beluga --config

Help:
  For help using this tool, please open an issue on the Github repository:
  https://github.rcac.purdue.edu/RDSL/beluga

"""
from docopt import docopt
import beluga.Beluga as Beluga
import os, sys, logging
import importlib # Only works with Python >= 3.4

def load_scenario(scenario_name):
    """Loads a scenario from python module name or file name/path"""
    # TODO: Log error messages on failure

    # Check if a python filename was given
    if scenario_name.endswith('.py') and os.path.exists(scenario_name) and os.path.isfile(scenario_name):
        module_dir, module_file = os.path.split(scenario_name)
        module_name, module_ext = os.path.splitext(module_file)
        sys.path.append(module_dir)
    else:
        if scenario_name.isidentifier():
            module_name = scenario_name

        else:
            print('Invalid scenario filename or module name')
            return None
    try:
        scenario = importlib.import_module(module_name)
         # Check if module has a get_problem() function
        if hasattr(scenario,'get_problem') and callable(scenario.get_problem):
            # Module loaded successfully
            return scenario
        else:
            print('Unable to find get_problem() function in scenario module')
            return None

    except ImportError:
        print('Scenario module not found')
        return None

def main(options):
    if options['--config']:
        import beluga.BelugaConfig as BelugaConfig
        BelugaConfig(run_tool=True)
        return

    scenario = load_scenario(options['SCENARIO'].strip())
    if scenario is None:
        return

    levels = {  'ALL': logging.DEBUG,
                'DEBUG': logging.DEBUG,
                '0': logging.DEBUG,
                'INFO': logging.INFO,
                '1': logging.INFO,
                'WARNING': logging.WARN,
                'WARN': logging.WARN,
                '2': logging.WARN,
                'ERROR': logging.ERROR,
                '3': logging.ERROR,
                'CRITICAL': logging.CRITICAL,
                '4': logging.CRITICAL}
    # print(options)

    if options['--log'][0] not in levels:
        print('Invalid value specified for logging level')
        return

    logging_lvl = levels[options['--log'][0]]
    if options['-q']:
        # Suppress all console output except critical errors
        display_lvl = logging.CRITICAL
    else:
        if options['--display'][0] not in levels:
            print('Invalid value specified for display level')
            return
        display_lvl = levels[options['--display'][0]]

    print('Module loaded successfully. ðŸ˜‚')
    problem = scenario.get_problem()
    Beluga.run(problem, logging_level=logging_lvl, display_level=display_lvl)
    # print(options)

options = docopt(__doc__,version=0.1)
main(options)
# Use command line arguments to get input file
# problem = get_problem()
# sol = Beluga.run(problem)
